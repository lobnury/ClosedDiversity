/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright Vladimir Dzyuba
 * From Implementation of the Flexics pattern sampler.
 * Dzyuba, V., van Leeuwen, M., & De Raedt, L. (2016). Flexible constrained sampling with guarantees for pattern mining. arXiv:1610.09263.
*/

package malb.m4ri;

public class m4ri_jni {
  public static SWIGTYPE_p_mzd_t mzd_init(int r, int c) {
    long cPtr = m4ri_jniJNI.mzd_init(r, c);
    return (cPtr == 0) ? null : new SWIGTYPE_p_mzd_t(cPtr, false);
  }

  public static void mzd_free(SWIGTYPE_p_mzd_t A) {
    m4ri_jniJNI.mzd_free(SWIGTYPE_p_mzd_t.getCPtr(A));
  }

  public static void mzd_copy(SWIGTYPE_p_mzd_t dest, SWIGTYPE_p_mzd_t src) {
    m4ri_jniJNI.mzd_copy(SWIGTYPE_p_mzd_t.getCPtr(dest), SWIGTYPE_p_mzd_t.getCPtr(src));
  }

  public static int mzd_read_bit(SWIGTYPE_p_mzd_t m, int r, int c) {
    return m4ri_jniJNI.mzd_read_bit(SWIGTYPE_p_mzd_t.getCPtr(m), r, c);
  }

  public static void mzd_write_bit(SWIGTYPE_p_mzd_t m, int r, int c, int val) {
    m4ri_jniJNI.mzd_write_bit(SWIGTYPE_p_mzd_t.getCPtr(m), r, c, val);
  }

  public static void mzd_echelonize(SWIGTYPE_p_mzd_t m, int full) {
    m4ri_jniJNI.mzd_echelonize(SWIGTYPE_p_mzd_t.getCPtr(m), full);
  }

  public static SWIGTYPE_p_mzd_t mzd_init_window(SWIGTYPE_p_mzd_t M, int lowr, int lowc, int highr, int highc) {
    long cPtr = m4ri_jniJNI.mzd_init_window(SWIGTYPE_p_mzd_t.getCPtr(M), lowr, lowc, highr, highc);
    return (cPtr == 0) ? null : new SWIGTYPE_p_mzd_t(cPtr, false);
  }

  public static void mzd_free_window(SWIGTYPE_p_mzd_t A) {
    m4ri_jniJNI.mzd_free_window(SWIGTYPE_p_mzd_t.getCPtr(A));
  }

  public static void mzd_randomize(SWIGTYPE_p_mzd_t M) {
    m4ri_jniJNI.mzd_randomize(SWIGTYPE_p_mzd_t.getCPtr(M));
  }

  public static void mzd_row_swap(SWIGTYPE_p_mzd_t M, int rowa, int rowb) {
    m4ri_jniJNI.mzd_row_swap(SWIGTYPE_p_mzd_t.getCPtr(M), rowa, rowb);
  }

  public static SWIGTYPE_p_mzd_t mzd_submatrix(SWIGTYPE_p_mzd_t S, SWIGTYPE_p_mzd_t M, int lowr, int lowc, int highr, int highc) {
    long cPtr = m4ri_jniJNI.mzd_submatrix(SWIGTYPE_p_mzd_t.getCPtr(S), SWIGTYPE_p_mzd_t.getCPtr(M), lowr, lowc, highr, highc);
    return (cPtr == 0) ? null : new SWIGTYPE_p_mzd_t(cPtr, false);
  }

  public static int mzd_equal(SWIGTYPE_p_mzd_t A, SWIGTYPE_p_mzd_t B) {
    return m4ri_jniJNI.mzd_equal(SWIGTYPE_p_mzd_t.getCPtr(A), SWIGTYPE_p_mzd_t.getCPtr(B));
  }

  public static int mzd_echelonize_pluq(SWIGTYPE_p_mzd_t A, int full) {
    return m4ri_jniJNI.mzd_echelonize_pluq(SWIGTYPE_p_mzd_t.getCPtr(A), full);
  }

  public static int mzd_echelonize_m4ri(SWIGTYPE_p_mzd_t A, int full, int k) {
    return m4ri_jniJNI.mzd_echelonize_m4ri(SWIGTYPE_p_mzd_t.getCPtr(A), full, k);
  }

  public static void mzd_clear_bits(SWIGTYPE_p_mzd_t M, int x, int y, int n) {
    m4ri_jniJNI.mzd_clear_bits(SWIGTYPE_p_mzd_t.getCPtr(M), x, y, n);
  }

  public static int getM4ri_radix() {
    return m4ri_jniJNI.m4ri_radix_get();
  }

}
