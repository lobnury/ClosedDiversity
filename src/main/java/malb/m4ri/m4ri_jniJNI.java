/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright Vladimir Dzyuba
 * From Implementation of the Flexics pattern sampler.
 * Dzyuba, V., van Leeuwen, M., & De Raedt, L. (2016). Flexible constrained sampling with guarantees for pattern mining. arXiv:1610.09263.
*/

package malb.m4ri;

public class m4ri_jniJNI {
  public final static native long mzd_init(int jarg1, int jarg2);
  public final static native void mzd_free(long jarg1);
  public final static native void mzd_copy(long jarg1, long jarg2);
  public final static native int mzd_read_bit(long jarg1, int jarg2, int jarg3);
  public final static native void mzd_write_bit(long jarg1, int jarg2, int jarg3, int jarg4);
  public final static native void mzd_echelonize(long jarg1, int jarg2);
  public final static native long mzd_init_window(long jarg1, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void mzd_free_window(long jarg1);
  public final static native void mzd_randomize(long jarg1);
  public final static native void mzd_row_swap(long jarg1, int jarg2, int jarg3);
  public final static native long mzd_submatrix(long jarg1, long jarg2, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native int mzd_equal(long jarg1, long jarg2);
  public final static native int mzd_echelonize_pluq(long jarg1, int jarg2);
  public final static native int mzd_echelonize_m4ri(long jarg1, int jarg2, int jarg3);
  public final static native void mzd_clear_bits(long jarg1, int jarg2, int jarg3, int jarg4);
  public final static native int m4ri_radix_get();
}
